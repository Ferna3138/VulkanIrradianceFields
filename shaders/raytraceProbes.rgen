#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "raycommon.glsl"
#include "host_device.h"
#include "probeUtil.glsl"


// clang-format off
layout(location = 0) rayPayloadEXT ProbeRayPayload prd;

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage, rgba32f) uniform image2D image;

layout( set = 0, binding = eStatus ) readonly buffer ProbeStatusSSBO { uint probe_status[]; };
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on


void main() {
    const ivec2 pixel_coord = ivec2(gl_LaunchIDEXT.xy);
    const int probe_index = pixel_coord.y;
    const int ray_index = pixel_coord.x;

    
    const bool skip_probe = (probe_status[probe_index] == PROBE_STATUS_OFF) || (probe_status[probe_index] == PROBE_STATUS_UNINITIALISED);
    if ( use_probe_status() && skip_probe ) {
        return;
    }

    const int probe_counts = probe_counts.x * probe_counts.y * probe_counts.z;
    if ( probe_index >= probe_counts ) {
        return;
    }

    ivec3 probe_grid_indices = probe_index_to_grid_indices(probe_index);
    vec3 ray_origin = grid_indices_to_world(probe_grid_indices, probe_index);
    vec3 direction = normalize( mat3(random_rotation) * spherical_fibonacci(ray_index, probe_rays));

    prd.radiance = vec3(0);
    prd.distance = 0;

    //float tMax     = 1.0;
    float tMax     = 5.0;
    float tMin     = 0.0;
    traceRayEXT(topLevelAS,
                gl_RayFlagsOpaqueEXT,
                0xff,
                0,
                0,
                0,
                ray_origin,
                tMin,
                direction,
                tMax,
                0);

    imageStore(global_images_2d[radiance_output_index], pixel_coord, vec4(prd.radiance, prd.distance));

}
